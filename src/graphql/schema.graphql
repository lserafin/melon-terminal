scalar Address
scalar DateTime
scalar BigNumber

enum NetworkEnum {
  MAINNET
  KOVAN
  TESTNET
  OFFLINE
  INVALID
}

enum SetupProgressEnum {
  BEGIN
  ACCOUNTING
  FEE_MANAGER
  PARTICIPATION
  POLICY_MANAGER
  SHARES
  TRADING
  VAULT
  COMPLETE
}

enum InvestmentRequestStateEnum {
  VALID
  EXPIRED
  WAITING
  NONE
}

type Block {
  hash: String!
  number: BigNumber!
  timestamp: DateTime!
}

type Account {
  address: Address!
  balance(token: TokenEnum!): BigNumber
  fund: Hub
  allowance(token: Address!, spender: Address!): BigNumber!
  participation(address: Address!): AccountParticipation
  shares(address: Address!): AccountShares
}

type AccountParticipation {
  address: Address!
  hasInvested: Boolean!
  hasRequest: Boolean!
  hasValidRequest: Boolean!
  hasExpiredRequest: Boolean!
  investmentRequestState: InvestmentRequestStateEnum!
  request: Request
  canCancelRequest: Boolean!
}

type AccountShares {
  address: Address!
  balanceOf: BigNumber!
}

type Request {
  investmentAsset: Address!
  investmentAmount: BigNumber!
  requestedShares: BigNumber!
  timestamp: DateTime
}

type TokenBalance {
  token: Token!
  balance: BigNumber!
}

type Token {
  address: Address!
  name: String
  symbol: String!
  decimals: Int!
  price: BigNumber!
}

type Holding {
  token: Token
  amount: BigNumber!
  shareCostInAsset: BigNumber!
}

type HubRoutes {
  version: Version
  accounting: Accounting
  participation: Participation
  shares: Shares
  trading: Trading
  vault: Vault
  feeManager: FeeManager
  policyManager: PolicyManager
}

type Hub {
  address: Address!
  name: String!
  routes: HubRoutes!
  manager: String!
  creator: String!
  creationTime: DateTime!
  isShutDown: Boolean!
  progress: SetupProgressEnum!
}

type Accounting {
  address: Address!
  holdings: [Holding]!
  grossAssetValue: BigNumber!
  netAssetValue: BigNumber!
  sharePrice: BigNumber!
}

type Participation {
  address: Address!
  historicalInvestors: [Address!]!
}

type Shares {
  address: Address!
  balanceOf(owner: Address!): BigNumber!
  totalSupply: BigNumber!
}

type Trading {
  address: Address!
  openMakeOrders: [OpenMakeOrder!]!
  lockedAssets: [Address!]!
}

type OpenMakeOrder {
  id: BigNumber!
  expiresAt: DateTime!
  orderIndex: BigNumber!
  buyAsset: Address!
  makerAsset: Address!
  takerAsset: Address!
  makerQuantity: BigNumber!
  takerQuantity: BigNumber!
  exchange: Address!
}

type Vault {
  address: Address!
}

type PolicyManager {
  address: Address!
  policies: [Policy!]!
}

interface Policy {
  address: Address!
  identifier: String!
}

type MaxConcentration implements Policy {
  address: Address!
  identifier: String!
  maxConcentration: BigNumber!
}

type MaxPositions implements Policy {
  address: Address!
  identifier: String!
  maxPositions: Int!
}

type PriceTolerance implements Policy {
  address: Address!
  identifier: String!
  priceTolerance: BigNumber!
}

type AssetWhitelist implements Policy {
  address: Address!
  identifier: String!
  assetWhitelist: [Address!]!
}

type AssetBlacklist implements Policy {
  address: Address!
  identifier: String!
  assetBlacklist: [Address!]!
}

type UserWhitelist implements Policy {
  address: Address!
  identifier: String!
}

type CustomPolicy implements Policy {
  address: Address!
  identifier: String!
}

type FeeManager {
  address: Address!
  managementFeeAmount: BigNumber
  performanceFeeAmount: BigNumber
  performanceFee: PerformanceFee
  managementFee: ManagementFee
}

type PerformanceFee {
  address: Address!
  rate: Float!
  period: Float!
  highWaterMark: Float!
  initializeTime: DateTime!
  canUpdate: Boolean!
}

type ManagementFee {
  address: Address!
  rate: Float!
}

type Version {
  address: Address!
}

type PriceSource {
  address: Address!
  lastUpdate: DateTime
}

type Query {
  network: NetworkEnum!
  block: Block!
  prices: PriceSource!
  account: Account
  accounts: [Account!]!
  fund(address: Address!): Hub
}

type Schema {
  query: Query
}
